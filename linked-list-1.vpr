/** 
    SINGLY LINKED LIST 1 - USING NULL-TERMINATED RECURSIVE PREDICATES
*/

field elem: Int
field next: Ref

/** singly linked list that cannot be empty */
predicate list(this: Ref) {
    acc(this.elem) && acc(this.next) && (this.next != null ==> list(this.next)) 
}

/** singly linked list that can be empty */
predicate list2(this: Ref) {
    this != null ==> acc(this.elem) && acc(this.next) && list(this.next) 
}

/** An iterative implementation of reversing a singly linked list 
    using the list predicate. Returns a reference to the new head of the list */
method reverseIter(head: Ref) returns (res: Ref)
    requires list(head)
    // requires head != null
    ensures list(res)
    ensures old(length(head)) == length(res)
    
    ensures forall i : Int :: i >= 0 && i < length(res) ==> 
        get(res, length(res) - i - 1) == old(get(head, i))
{
    var prev : Ref := null
    var curr : Ref := head
    var len : Int := length(head)
    
    unfold list(head)   // required for the verifier to assert that head != null if it is not given in the pre-condition
    fold list(head)

    while (curr != null)
        invariant curr != null ==> list(curr)
        invariant curr == null ==> prev != null
        invariant prev != null ==> list(prev)
        invariant length(prev) + length(curr) == len
        invariant forall i : Int :: i >= length(prev) && i < len ==> get(curr, i - length(prev)) == old(get(head, i))
        invariant forall j : Int :: j >= 0 && j < length(prev) ==> old(get(head, j)) == get(prev, length(prev) - 1 - j)
    {
        unfold acc(list(curr))

        var nextTmp : Ref := curr.next
        curr.next := prev
        
        fold list(curr)
        
        prev := curr
        curr := nextTmp
    }
    
    res := prev
}

/** An iterative implementation of reversing a singly linked list 
    using the list2 predicate. Returns a reference to the new head of the list */
method reverseIter2(head: Ref) returns (res: Ref)
    requires list(head)
    ensures list(res)
    ensures old(length(head)) == length(res)
    ensures forall i : Int :: i >= 0 && i < length(res) ==> 
        get(res, length(res) - i - 1) == old(get(head, i))
{
    if (head == null) {
        res := head
    } else { 
        res := reverseIter(head)
    }
}

/* inserts a new node before the node at index and returns the head of the list */
method insert(head: Ref, index: Int, val: Int) returns (res: Ref)
    requires list(head)
    requires index >= 0 && index <= length(head)
    ensures list(res)
{
    var i : Int := index
    
    var curr : Ref := head
    var prev : Ref := null  
    
    var len : Int := length(head)
    
    while (i >= 0) 
        invariant curr != null ==> list(curr)
    {
        unfold list(curr)
        prev := curr

        curr := curr.next
        i := i - 1
    }

    var tmp : Ref 
    tmp := new(*)
    tmp.elem := val
    tmp.next := curr
    fold list(tmp)

    if (prev == null) {    
        res := tmp
    } else {
        prev.next := tmp
        res := head
        // TODO: missing acc from head to tmp
    }   
}

function length(head: Ref) : Int
    requires head != null ==> list(head)
    ensures head == null ==> result == 0
    ensures head != null ==> result > 0
{
    head == null ? 0 : unfolding list(head) in length(head.next) + 1
}

function get(head: Ref, i: Int) : Ref
    requires acc(list(head))
    requires i >= 0 && i < length(head)
{
    i == 0 ? head : unfolding acc(list(head)) in get(head.next, i - 1)
}
