/** 
    SINGLY LINKED LIST 2 - USING LIST SEGMENTS
*/

/* List Nodes */

field elem: Int
field next: Ref

predicate lseg(l: Ref, r: Ref) {
  l != r ==> acc(l.elem) && acc(l.next) && acc(lseg(l.next, r))
}

// Takes a list segment and extends it by one
method extendLseg(l: Ref, r: Ref)
    requires lseg(l, r) && acc(r.next) && acc(r.elem)
    ensures lseg(l, old(r.next))
{
    if (l == r) {
        fold lseg(r.next, r.next)
        fold lseg(l, r.next)
    } else {
        unfold lseg(l, r)
        
        var extended : Ref := r.next
        extendLseg(l.next, r)

        fold lseg(l, extended)
    }
}

/* Reverses a singly-linked list from the l up to but not including r. Returns the new head of the list. */
method reverseRecur(l: Ref, r: Ref) returns (res: Ref)
    requires lseg(l, r) && (r != null ==> acc(r.next) && acc(r.elem))
    ensures lseg(res, l) && (l != null ==> acc(l.next) && acc(l.elem))
{
    unfold lseg(l, r)
    if (l.next == r) {
        res := l
    } else {
        var p : Ref
        p := reverseRecur(l.next, r)
        l.next.next := l
        l.next := r

        extendLseg(r, l.next)
        res := p
    }
    // fold lseg(res, r)
}


method insertNode(l: Ref, index: Int, val: Int) returns (res: Ref)
    requires lseg(l, null)
    requires index >= 0 && index <= lengthNodes(l, null)
    ensures lseg(res, null)
    ensures old(lengthNodes(l, null)) + 1 == lengthNodes(res, null)
    ensures contentNodes(res, null) == 
        old(contentNodes(l, null)[..index] ++ Seq(val) ++ contentNodes(l, null)[index..])
{
    if (index == 0) {
        res := new(*)
        res.elem := val
        res.next := l
        fold lseg(res, null)
    } else {
        var tmp: Ref
        
        unfold lseg(l, null)
        tmp := insertNode(l.next, index - 1, val)
        l.next := tmp
        res := l
        fold lseg(l, null)
    }
}

function lengthNodes(l: Ref, r: Ref) : Int
    requires lseg(l, r)
    ensures l == r ==> result == 0
    ensures l != r ==> result > 0
{
    l == r ? 0 : 1 + unfolding lseg(l, r) in lengthNodes(l.next, r)
}

function contentNodes(l: Ref, r: Ref) : Seq[Int]
    requires lseg(l, r)
    ensures  l == r ==> result == Seq[Int]()
    ensures  l != r ==> 0 < |result| && |result| == lengthNodes(l, r)
{
    l == r ? Seq[Int]() : unfolding lseg(l,r) in Seq(l.elem) ++ contentNodes(l.next, r)
}

/* Lists */


field head: Ref

predicate List(this: Ref) {
  acc(this.head) && acc(lseg(this.head, null))
}

method reverse(this: Ref)
    requires acc(List(this))
    ensures acc(List(this))
{
    unfold acc(List(this)) 
    
    var newHead : Ref := null
    newHead := reverseRecur(this.head, null)
    this.head := newHead
    
    fold acc(List(this))
}

/* insert a new element before the element at index */
method insert(this: Ref, index: Int, val: Int)
    requires acc(List(this))
    requires index >= 0 && index <= length(this)
    ensures acc(List(this))
    ensures old(length(this)) + 1 == length(this)
    ensures content(this) == 
        old(content(this)[..index] ++ Seq(val) ++ content(this)[index..])
{
    unfold List(this)
    var newHead : Ref := null
    newHead := insertNode(this.head, index, val)
    this.head := newHead
    fold List(this)
}

function length(this: Ref) : Int
    requires List(this)
    ensures unfolding List(this) in this.head == null ==> result == 0
    ensures unfolding List(this) in this.head != null ==> result > 0
{
    unfolding List(this) in lengthNodes(this.head, null)
}

function content(this: Ref) : Seq[Int]
    requires List(this)
{
    unfolding acc(List(this)) in contentNodes(this.head, null)    
}
