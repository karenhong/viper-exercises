field elem: Int
field next: Ref

predicate list(this: Ref) {
    acc(this.elem) && acc(this.next) && (this.next != null ==> list(this.next)) 
}

method insert(head: Ref, idx: Int)
    requires list(head)
{
    exhale list(head)
    
    var curr : Ref
    inhale list(curr)
    inhale list(curr) --* list(head) 
        && (forall j : Int :: j >= idx ==> get(head, j) == old[lhs](get(curr, j - idx)))
        && (forall k : Int :: k >= 0 && k < idx ==> get(head, k) == old(get(head, k)))

    apply list(curr) --* list(head) 
        && (forall j : Int :: j >= idx ==> get(head, j) == old[lhs](get(curr, j - idx)))
        && (forall k : Int :: k >= 0 && k < idx ==> get(head, k) == old(get(head, k)))

    assert forall k : Int :: k >= 0 && k < idx ==> get(head, k) == old(get(head, k))
}

function get(head: Ref, i: Int) : Ref
    requires acc(list(head))
