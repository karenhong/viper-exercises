field elem: Int
field next: Ref

predicate list(this: Ref) {
    acc(this.elem) && acc(this.next) && (this.next != null ==> list(this.next)) 
}

method insert(head: Ref, index: Int, val: Int) returns (res: Ref)
    requires list(head)
    requires index >= 0 && index <= length(head)
    ensures list(res)
    // The postcondition below verifies with silicon but not with carbon
    ensures old(length(head)) + 1 == length(res)
{
    assume index != 0
    exhale list(head)
    
    var curr : Ref
    inhale list(curr)
    inhale old(length(head)) - (index-1) == length(curr)
    inhale list(curr) --* list(head) 
        && length(head) - (index-1) == old[lhs](length(curr))
        && (forall j : Int :: j >= (index-1) && j < length(head) ==> get(head, j) == old[lhs](get(curr, j - (index-1))))
        && (forall k : Int :: k >= 0 && k < (index-1) ==> get(head, k) == old(get(head, k)))

    unfold list(curr)

    var tmp : Ref 
    tmp := new(*)
    tmp.next := curr.next
    curr.next := tmp
    res := head

    fold list(tmp)
    fold list(curr)

    apply list(curr) --* list(head) 
        && length(head) - (index-1) == old[lhs](length(curr))
        && (forall j : Int :: j >= (index-1) && j < length(head) ==> get(head, j) == old[lhs](get(curr, j - (index-1))))
        && (forall k : Int :: k >= 0 && k < (index-1) ==> get(head, k) == old(get(head, k)))
}

function length(head: Ref) : Int
    requires head != null ==> list(head)
    ensures head == null ==> result == 0
    ensures head != null ==> result > 0
{
    head == null ? 0 : unfolding list(head) in length(head.next) + 1
}

function get(head: Ref, i: Int) : Ref
    requires acc(list(head))
